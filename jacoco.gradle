apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

variants().all { variant ->
    def params = prepareJacocoParams(variant)
    def reportTask = createReportTask(params)
    def verificationTask = createVerificationTask(params)
    verificationTask.dependsOn reportTask
}

def prepareJacocoParams(variant) {
    def params = [:]
    params.variantName = variant.name
    params.variantCapName = variant.name.capitalize()
    params.fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/data/**',
            '**/di/**',
            '**/*Activity**',
            '**/*Dialog**',
            '**/*Fragment**',
            '**/*Adapter**',
            '**/*Item**',
            '**/util/Event.class',
            '**/util/EventObserver.class',
            '**/*AssistedFactory**', // auto generated files from Dagger (dependency injection)
            '**/hilt_**', // auto generated files from Dagger (dependency injection)
            '**/**VinneApplication**',
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/data/**',
            '**/di/**',
            '**/*Activity**',
            '**/*Dialog**',
            '**/*Fragment**',
            '**/*Adapter**',
            '**/*Item**',
            '**/*DataBinderMapperImpl**',
            '**/*DataBindingTriggerClass**',
            '**/*BR**',
            '**/utils/*',
            '**/utils/extensions/*',
            '**/mappers/*',
            '**/models/*',
            '**/databinding/*',
            '**/*AssistedFactory**', // auto generated files from Dagger (dependency injection)
            '**/hilt_**', // auto generated files from Dagger (dependency injection)
            '**/**VinneApplication**'
    ]

    println "$projectDir/src/main/java"

    def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/${params.variantName}/classes", excludes: params.fileFilter)
    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${params.variantName}", excludes: params.fileFilter)
    params.classDirectories = files([javaClasses, kotlinClasses])

    params.sourceDirectories = files([
            "$projectDir/src/main/java",
            "$projectDir/src/${params.variantName}/java",
            "$projectDir/src/main/kotlin",
            "$projectDir/src/${params.variantName}/kotlin"
    ])

    params.executionData = files("${buildDir}/jacoco/test${params.variantCapName}UnitTest.exec")
    return params
}

def createReportTask(params) {
    return task("jacoco${params.variantCapName}Report", type: JacocoReport, dependsOn: "test${params.variantCapName}UnitTest") {
        reports {
            xml.enabled = true
            html.enabled = true
            csv.enabled = false
        }
        classDirectories.from = params.classDirectories
        sourceDirectories.from = params.sourceDirectories
        executionData.from = params.executionData
    }
}

def createVerificationTask(params) {
    return task("jacoco${params.variantCapName}Verification", type: JacocoCoverageVerification) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for $params.variantCapName"
        sourceDirectories.from = params.sourceDirectories
        classDirectories.from = params.classDirectories
        executionData.from = params.executionData
        violationRules {
            rule {
                limit {
                    counter = 'INSTRUCTION'
                    value = 'COVEREDRATIO'
                    minimum = 0.8
                }
            }
        }
    }
}

def variants() {
    if (project.android.hasProperty('libraryVariants')) {
        return project.android.libraryVariants
    } else {
        return project.android.applicationVariants
    }
}
