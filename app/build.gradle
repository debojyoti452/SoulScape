plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

apply from: '../jacoco.gradle'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdk globalConfiguration["androidCompileSDK"]

    defaultConfig {
        applicationId "com.swing.soulscape"
        minSdk globalConfiguration["androidMinSDK"]
        targetSdk globalConfiguration["androidCompileSDK"]

        versionCode globalConfiguration["androidVersionCode"]
        versionName globalConfiguration["androidVersionName"]

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        dev {

        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    lintOptions {
        lintConfig file("lint.xml")
        disable "IncompatibleIidVersion"
        abortOnError false
    }

    testOptions.unitTests {
        includeAndroidResources = true
        returnDefaultValues = true
    }
}

dependencies {
    def ext = rootProject.ext

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation(
            project(":common"),
            project(":data"),
            project(":domain"),
            project(":remote"),

            ext.appDependencies.kotlin,
            ext.appDependencies.kotlinKtx,
            ext.appDependencies.liveData,
            ext.appDependencies.viewModel,
            ext.appDependencies.coroutines,
            ext.appDependencies.coroutinesAndroid,
            ext.appDependencies.daggerHiltAndroid,
            ext.appDependencies.timber,

            ext.uiDependencies.material,
            ext.uiDependencies.navigationFragment,
            ext.uiDependencies.navigationUI,
    )

    kapt(
            ext.appDependencies.daggerXcompiler,
            ext.appDependencies.daggerCompiler,
    )

    testImplementation(
            ext.testDependencies.junit,
    )
}

/**
 * get value from local.properties
 *
 * @return value of the key
 */
def getLocalPropertiesValue(key) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty(key)
}
